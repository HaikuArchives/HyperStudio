
include config.jam ;

if ( ! $(PLATFORM) )
{
	Exit "Please run ./configure first." ;
}

# CreateResource <Resource File> : <Resource Source> ;
#   Create resource binary file from source.
rule CreateResource
{
	Depends $(<) : $(>) ;
}

if ( $(FAMILY) = BEOS )
{
	actions CreateResource
	{
		$(BERES) -o "$(<)" "$(>)"
	}
}

# AddResources <Application Name> : <Resource Files> ;
#   Adds the given resources to the given application.
rule AddResources
{
	Depends $(<) : $(>) ;
	Clean $(<) : $(>) ;
}

if ( $(FAMILY) = BEOS )
{
	actions AddResources
	{
		$(XRES) -o "$(<)" "$(>)"
	}
}

if ( $(FAMILY) = BEOS )
{
	# MimeSet <Application Name> ;
	#   Sets the mime type of the given application to be an application.
	actions MimeSet
	{
		$(MIMESET) -f "$(<)"
	}
}

# Package <Application Name> : <Package File> ;
#   Build the package file for the given application.
rule Package
{
	Depends $(<) : $(>) ;
	BuildPackage $(<) ;
}

if $(FAMILY) = BEOS
{
	actions BuildPackage
	{
		rm -rf $(<) "$(<) $(VERSION)" && \
			$(MKDIR) "$(<) $(VERSION)" && \
			cp AUTHORS "$(<) $(VERSION)/AUTHORS.txt" && \
			cp COPYING "$(<) $(VERSION)/COPYING.txt" && \
			cp CREDITS "$(<) $(VERSION)/CREDITS.txt" && \
			cp THANKS "$(<) $(VERSION)/THANKS.txt" && \
			$(BERES) -o "$(<).rsrc" $(<).rdef && \
			cp $(<) "$(<) $(VERSION)" && \
			zip -9 -r $(<) "$(<) $(VERSION)" && \
			rm -rf "$(<) $(VERSION)"
	}
}

# Now handle platform-specific settings
if ( $(OSPLAT) = X86 )
{
	switch $(OPTIMIZE)
	{
		case FULL : OPTIMIZER = -O3 ;
		case SOME : OPTIMIZER = -O1 ;
		case NONE : OPTIMIZER = -O0 ;
		# Default to FULL
		case * : OPTIMIZER = -O3 ;
	}

	DEBUG = ;

	if ( $(DEBUGGER) = TRUE )
	{
		DEBUG += -g ;
		OPTIMIZER = -O0 ;
	}

	CCFLAGS += $(OPTIMIZER) $(DEBUG) ;
	C++FLAGS += $(OPTIMIZER) $(DEBUG) ;

	if ( $(WARNINGS) = ALL )
	{		
		if ( $(FAMILY) = BEOS )
		{
			CCFLAGS += -Wall -Wno-multichar -Wno-ctor-dtor-privacy ;
			C++FLAGS += -Wall -Wno-multichar -Wno-ctor-dtor-privacy ;
		}
		else
		{
			CCFLAGS += -Wall ;
			C++FLAGS += -Wall ;
		}
	}
	else if ( $(WARNINGS) = NONE )
	{
		CCFLAGS += -w ;
		C++FLAGS += -w ;
	}

	LINKFLAGS += $(DEBUG) ;

	if ( $(FAMILY) = BEOS )
	{
		# Set linker flags
		switch $(TYPE)
		{
			case APP : LINKFLAGS += -Xlinker -soname=_APP_ ;
			case SHARED : LINKFLAGS += -nostart -Xlinker -soname=$(NAME) ;
		}
	}
} 
else if ( $(OSPLAT) = PPC ) 
{
	switch $(OPTIMIZE)
	{
		case FULL : OPTIMIZER = -O7 ;
		case SOME : OPTIMIZER = -O3 ;
		case NONE : OPTIMIZER = -O0 ;
		# Default to FULL
		case * : OPTIMIZER = -O7 ;
	}

	DEBUG = ;

	if ( $(DEBUGGER) = TRUE )
	{
		DEBUG += -g ;
	}

	CCFLAGS += $(OPTIMIZER) $(DEBUG) ;
	C++FLAGS += $(OPTIMIZER) $(DEBUG) ;

	if ( $(WARNINGS) = ALL )
	{		
		CCFLAGS += -w on -requireprotos ;
		C++FLAGS += -w on -requireprotos ;
	}
	else if ( $(WARNINGS) = NONE )
	{
		CCFLAGS += -w off ;
		C++FLAGS += -w off ;
	}

	# Set linker flags
	if ( $(TYPE) = SHARED )
	{
		LINKFLAGS += -xms ;
	}

	if ( $(FAMILY) = BEOS )
	{
		LINKFLAGS += -export pragma -init _init_routine_ 
			-term _term_routine_ -lroot 
			/boot/develop/lib/ppc/glue-noinit.a 
			/boot/develop/lib/ppc/init_term_dyn.o 
			/boot/develop/lib/ppc/start_dyn.o ;
	}
} 
else 
{
	EXIT "Your hardware is unsupported" ;
}

# Define some tools
if ( $(FAMILY) = BEOS )
{
	XRES = xres ;
	BERES = beres ;
	MIMESET = mimeset ;
}
