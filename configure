#!/bin/sh

CC="gcc"
CXX="g++"
CCFLAGS="$CCFLAGS -W -Wall"
LINKLIBS=""
SYSTEM="`uname -s`"
RELEASE="`uname -r`"
OS="$SYSTEM"
OSPLAT="$OS"
PLATFORM="$OS"
FAMILY="$OS"

# System-specific flags
case $SYSTEM in
	BeOS)
		DEFINES="$DEFINES SYS_BEOS"
		FAMILY="BEOS"
		case $RELEASE in
			5.0.4) # BONE beta 7
				OSPLAT="$OSPLAT / BONE"
				DEFINES="$DEFINES BEOS_BONE"
			;;
			6.0|6.1|6.2) # Zeta or R5 / BONE beta 7
				OSPLAT="$OSPLAT / BONE"
				DEFINES="$DEFINES SYS_ZETA BEOS_BONE"
				PLATFORM="Zeta"
			;;
			5.0*) # R5 / net_server
				OSPLAT="$OSPLAT / net_server"
				DEFINES="$DEFINES BEOS_NETSERVER"
			;;
			*)
				echo "Unsupported BeOS version $RELEASE"
				exit 1
			;;
		esac
	;;
	Haiku)
		DEFINES="$DEFINES SYS_HAIKU"
		PLATFORM="Haiku"
		FAMILY="BEOS"
	;;
	*)
		echo "$SYSTEM is an unsupported operating system"
		exit 1
	;;
esac

# Define platform for the source code
DEFINES="$DEFINES PLATFORM=$PLATFORM"

# Report system and platform
echo "   System: $SYSTEM"
echo " Platform: $PLATFORM"

# Check for endianness
cat > testconf.c << EOF
int main()
{
	int i = 1;
	return *( (char *) &i );
}
EOF
if ( cc -o testconf testconf.c && ./testconf ) > /dev/null 2>&1; then
	echo "   Endian: big"
	DEFINES="$DEFINES WORDS_BIGENDIAN"
else
	echo "   Endian: little"
fi
rm -f testconf.c testconf

# Generate config.jam
rm -f config.jam
cat << EOF > config.jam
CC        = $CC ;
C++       = $CXX ;
LINK      = $CXX ;
CCFLAGS   = $CCFLAGS ;
C++FLAGS  = $CCFLAGS ;
DEFINES   = $DEFINES ;
LINKLIBS  = $LINKLIBS ;
OS        = $OS ;
OSPLAT    = $OSPLAT ;
PLATFORM  = $PLATFORM ;
FAMILY    = $FAMILY ;
EOF

echo
echo "To build Hyperion, run:"
echo "  jam"
echo
